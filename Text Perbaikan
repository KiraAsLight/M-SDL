const db = require("../config/db");

// Ambil semua log aktivitas dengan debug
exports.getLogActivity = async (req, res) => {
  const sql = `SELECT * FROM log_aktivitas ORDER BY created_at DESC LIMIT 5`;

  try {
    const [rows] = await db.execute(sql);
    res.status(200).json(rows);
  } catch (err) {
    res.status(500).json({
      message: "Gagal mengambil data log",
      error: err.message,
    });
  }
};

// Ambil history berdasarkan rentang tanggal
exports.getHistory = async (req, res) => {
  const { mulai, sampai } = req.query;

  if (!mulai || !sampai) {
    return res.status(400).json({ error: "Rentang tanggal tidak lengkap" });
  }

  try {
    const [rows] = await db.execute(
      "SELECT * FROM log_aktivitas WHERE DATE(created_at) BETWEEN ? AND ? ORDER BY created_at DESC",
      [mulai, sampai]
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: "Gagal ambil data history" });
  }
};

// Endpoint baru untuk status dashboard
exports.getDoorStatus = async (req, res) => {
  try {
    // Ambil data log terbaru
    const [latestLog] = await db.execute(
      "SELECT * FROM log_aktivitas ORDER BY created_at DESC LIMIT 1"
    );

    // Hitung total akses hari ini
    const today = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
    const [todayAccess] = await db.execute(
      "SELECT COUNT(*) as total FROM log_aktivitas WHERE DATE(created_at) = ?",
      [today]
    );

    // Response data
    const response = {
      status_pintu: "Tertutup", // Default status, bisa disesuaikan dengan logika bisnis
      waktu_akses: latestLog.length > 0 ? latestLog[0].created_at : null,
      total_akses_hari_ini: todayAccess[0].total,
      last_user: latestLog.length > 0 ? latestLog[0].pengguna : null,
      last_card_id: latestLog.length > 0 ? latestLog[0].kartu_id : null
    };

    res.status(200).json(response);
  } catch (err) {
    console.error("Error mengambil status pintu:", err);
    res.status(500).json({
      message: "Gagal mengambil status pintu",
      error: err.message,
    });
  }
};

doorController

const express = require("express");
const router = express.Router();
const doorController = require("../controllers/doorController");

// Route Log Aktivitas
router.get("/log-aktivitas", doorController.getLogActivity);

// Route History (pakai rentang waktu)
router.get("/history", doorController.getHistory);

// Route Status Pintu (BARU)
router.get("/status", doorController.getDoorStatus);

module.exports = router;

doorRoutes

// Logout: hapus token/localStorage lalu redirect
document.getElementById("logoutBtn").addEventListener("click", () => {
  localStorage.removeItem("token"); // opsional, tergantung metode login lo
  window.location.href = "./login.html";
});

document.addEventListener("DOMContentLoaded", () => {
  fetchDashboardData();
});

function fetchDashboardData() {
  // Gunakan endpoint yang ada: /api/door/log-aktivitas
  fetch("http://localhost:3000/api/door/log-aktivitas")
    .then((response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then((data) => {
      const statusPintuEl = document.getElementById("statusPintu");
      const waktuEl = document.getElementById("doorTime");
      const aksesHariIniEl = document.getElementById("aksesHariIni");

      // Jika ada data log aktivitas
      if (data && data.length > 0) {
        // Ambil data terbaru (index 0 karena sudah diurutkan DESC)
        const latestLog = data[0];
        
        // Format waktu dari log terbaru
        const waktu = new Date(latestLog.created_at);
        const waktuFormatted = waktu.toLocaleString("id-ID", {
          dateStyle: "medium",
          timeStyle: "short",
        });

        // Set status pintu berdasarkan aktivitas terbaru
        statusPintuEl.textContent = "Tertutup"; // Default status
        waktuEl.textContent = waktuFormatted;

        // Hitung akses hari ini
        const today = new Date();
        const todayString = today.toISOString().split('T')[0]; // Format YYYY-MM-DD
        
        const aksesHariIni = data.filter(log => {
          const logDate = new Date(log.created_at).toISOString().split('T')[0];
          return logDate === todayString;
        }).length;

        aksesHariIniEl.textContent = aksesHariIni;
      } else {
        // Jika tidak ada data
        statusPintuEl.textContent = "Tidak Diketahui";
        waktuEl.textContent = "Belum ada aktivitas";
        aksesHariIniEl.textContent = "0";
      }
    })
    .catch((error) => {
      console.error("Gagal ambil data dashboard:", error);
      document.getElementById("statusPintu").textContent = "Error";
      document.getElementById("doorTime").textContent = "Gagal ambil data";
      document.getElementById("aksesHariIni").textContent = "Error";
    });
}

dashboard.js


HISTORY.js

document.addEventListener("DOMContentLoaded", () => {
  const historyTableBody = document.getElementById("historyTableBody");

  // Fungsi untuk ambil semua data history (gunakan endpoint history tanpa filter)
  async function fetchAllHistory() {
    // Daripada pakai log-aktivitas yang terbatas 5 data, 
    // lebih baik buat query ke history dengan rentang luas
    const today = new Date();
    const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
    
    const startDate = thirtyDaysAgo.toISOString().split('T')[0];
    const endDate = today.toISOString().split('T')[0];
    
    const endpoint = `http://localhost:3000/api/door/history?mulai=${startDate}&sampai=${endDate}`;

    try {
      const response = await fetch(endpoint);
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);

      const data = await response.json();
      renderHistoryToTable(data);
    } catch (error) {
      console.error("Gagal ambil data history:", error.message);
      showErrorMessage("Gagal memuat data history");
    }
  }

  // Fungsi untuk render data ke tabel history
  function renderHistoryToTable(data) {
    historyTableBody.innerHTML = ""; // Clear isi tabel

    if (data.length === 0) {
      historyTableBody.innerHTML = `
        <tr>
          <td colspan="6" class="p-4 text-center text-gray-500">Tidak ada data history ditemukan</td>
        </tr>
      `;
      return;
    }

    data.forEach((history, index) => {
      // Format waktu
      const createdAt = new Date(history.created_at);
      const tanggal = createdAt.toLocaleDateString("id-ID", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
      const jam = createdAt.toLocaleTimeString("id-ID", {
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      });

      // Handle keterangan - cek apakah field ada
      let keterangan = "Akses Pintu";
      if (history.keterangan) {
        keterangan = history.keterangan;
      } else if (history.status) {
        // Jika tidak ada keterangan, gunakan status
        keterangan = `Akses ${history.status}`;
      }

      // Tentukan warna badge berdasarkan status atau keterangan
      const status = (history.status || keterangan).toLowerCase();
      let badgeClass = "bg-gray-100 text-gray-800"; // default
      
      if (status.includes("berhasil") || status.includes("success")) {
        badgeClass = "bg-green-100 text-green-800";
      } else if (status.includes("gagal") || status.includes("failed") || status.includes("ditolak")) {
        badgeClass = "bg-red-100 text-red-800";
      } else if (status.includes("pending") || status.includes("menunggu")) {
        badgeClass = "bg-yellow-100 text-yellow-800";
      } else if (status.includes("akses")) {
        badgeClass = "bg-blue-100 text-blue-800";
      }

      const row = `
      <tr class="hover:bg-gray-50">
        <td class="p-4 text-center">${index + 1}</td>
        <td class="p-4">${history.kartu_id || "N/A"}</td>
        <td class="p-4">${history.pengguna || "N/A"}</td>
        <td class="p-4">${tanggal}</td>
        <td class="p-4">${jam}</td>
        <td class="p-4">
          <span class="inline-block px-2 py-1 text-xs font-medium ${badgeClass} rounded-full">
            ${keterangan}
          </span>
        </td>
      </tr>
    `;
      historyTableBody.insertAdjacentHTML("beforeend", row);
    });
  }

  // Fungsi untuk menampilkan pesan error
  function showErrorMessage(message) {
    historyTableBody.innerHTML = `
      <tr>
        <td colspan="6" class="p-4 text-center text-red-500">${message}</td>
      </tr>
    `;
  }

  // Fungsi untuk ambil data berdasarkan filter tanggal
  async function fetchFilteredHistory(startDate, endDate) {
    const endpoint = `http://localhost:3000/api/door/history?mulai=${startDate}&sampai=${endDate}`;

    try {
      const response = await fetch(endpoint);
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);

      const data = await response.json();
      renderHistoryToTable(data);
    } catch (error) {
      console.error("Gagal ambil data history terfilter:", error.message);
      showErrorMessage("Gagal memuat data filter");
    }
  }

  // Event listener untuk form filter
  const filterForm = document.getElementById("filterForm");
  if (filterForm) {
    filterForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;

      if (!startDate || !endDate) {
        alert("Silakan pilih tanggal mulai dan tanggal akhir!");
        return;
      }

      if (startDate > endDate) {
        alert("Tanggal mulai tidak boleh lebih besar dari tanggal akhir!");
        return;
      }

      await fetchFilteredHistory(startDate, endDate);
    });

    // Event listener untuk reset button
    const resetBtn = document.getElementById("resetBtn");
    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        document.getElementById("startDate").value = "";
        document.getElementById("endDate").value = "";
        fetchAllHistory(); // Reset ke data default
      });
    }
  }

  // Event listener untuk logout button
  const logoutBtn = document.getElementById("logoutBtn");
  if (logoutBtn) {
    logoutBtn.addEventListener("click", () => {
      localStorage.removeItem("token");
      window.location.href = "./login.html";
    });
  }

  // Load data history saat halaman pertama kali dibuka
  fetchAllHistory();
});

Update doorController.js

const db = require("../config/db");

// Ambil log aktivitas terbaru (untuk dashboard dan log activity page)
exports.getLogActivity = async (req, res) => {
  const sql = `SELECT * FROM log_aktivitas ORDER BY created_at DESC LIMIT 10`;

  try {
    const [rows] = await db.execute(sql);
    res.status(200).json(rows);
  } catch (err) {
    res.status(500).json({
      message: "Gagal mengambil data log",
      error: err.message,
    });
  }
};

// Ambil history berdasarkan rentang tanggal (untuk halaman history)
exports.getHistory = async (req, res) => {
  const { mulai, sampai } = req.query;

  // Jika tidak ada filter tanggal, ambil data 30 hari terakhir
  let sql, params;
  
  if (!mulai || !sampai) {
    // Default: 30 hari terakhir
    sql = `SELECT * FROM log_aktivitas 
           WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) 
           ORDER BY created_at DESC`;
    params = [];
  } else {
    // Dengan filter tanggal
    sql = `SELECT * FROM log_aktivitas 
           WHERE DATE(created_at) BETWEEN ? AND ? 
           ORDER BY created_at DESC`;
    params = [mulai, sampai];
  }

  try {
    const [rows] = await db.execute(sql, params);
    res.json(rows);
  } catch (err) {
    console.error("Error ambil history:", err);
    res.status(500).json({ error: "Gagal ambil data history" });
  }
};

// Endpoint untuk status dashboard (jika diperlukan)
exports.getDoorStatus = async (req, res) => {
  try {
    // Ambil data log terbaru
    const [latestLog] = await db.execute(
      "SELECT * FROM log_aktivitas ORDER BY created_at DESC LIMIT 1"
    );

    // Hitung total akses hari ini
    const today = new Date().toISOString().split('T')[0];
    const [todayAccess] = await db.execute(
      "SELECT COUNT(*) as total FROM log_aktivitas WHERE DATE(created_at) = ?",
      [today]
    );

    // Response data
    const response = {
      status_pintu: "Tertutup", // Default status
      waktu_akses: latestLog.length > 0 ? latestLog[0].created_at : null,
      total_akses_hari_ini: todayAccess[0].total,
      last_user: latestLog.length > 0 ? latestLog[0].pengguna : null,
      last_card_id: latestLog.length > 0 ? latestLog[0].kartu_id : null
    };

    res.status(200).json(response);
  } catch (err) {
    console.error("Error mengambil status pintu:", err);
    res.status(500).json({
      message: "Gagal mengambil status pintu",
      error: err.message,
    });
  }
};
